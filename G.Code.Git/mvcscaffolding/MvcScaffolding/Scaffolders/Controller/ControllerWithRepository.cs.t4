<#@ template language="C#" HostSpecific="True"  inherits="DynamicTransform" #>
<#@ template debug="true" hostSpecific="true"  #>

<#@ Output Extension="cs" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="EnvDTE" #>
using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Linq;
using System.Linq.Dynamic;
using System.Web;
using System.Web.Mvc;
<# if(!string.IsNullOrEmpty(Model.ModelTypeNamespace)) { #>
using <#= Model.ModelTypeNamespace #>;
<# } #>
<# if((!string.IsNullOrEmpty(Model.RepositoriesNamespace)) && (Model.RepositoriesNamespace != Model.ModelTypeNamespace)) { #>
using <#= Model.RepositoriesNamespace #>;
<# } #>

namespace <#= Model.ControllerNamespace #>
{   
<#  
	var modelType = (CodeType)Model.ModelType; 
	var modelName = modelType.Name; 
	var modelNamePlural = Model.ModelTypePluralized; 
	var modelVariable = modelName.ToLower(); 
	var relatedEntities = ((IEnumerable)Model.RelatedEntities).OfType<RelatedEntityInfo>();
	var primaryKeyProperty = modelType.VisibleMembers().OfType<CodeProperty>().Single(x => x.Name == Model.PrimaryKey);
	var routingName = Regex.Replace(Model.ControllerName, "Controller$", "", RegexOptions.IgnoreCase);
	var modelEnumTypes = (from cEnum in modelType.VisibleMembers().OfType<CodeProperty>()
                          where cEnum.Type.CodeType is CodeEnum
                          select cEnum).ToList();
#>
    public class <#= Model.ControllerName #> : Controller
    {
<# foreach(var repository in Repositories.Values) { #>
		private readonly I<#= repository.RepositoryTypeName #> <#= repository.VariableName #>;
<# } #>
		// If you are using Dependency Injection, you can delete the following constructor
        public <#= Model.ControllerName #>() : this(<#= String.Join(", ", Repositories.Values.Select(x => "new " + x.RepositoryTypeName + "()")) #>)
        {
        }

        public <#= Model.ControllerName #>(<#= String.Join(", ", Repositories.Values.Select(x => "I" + x.RepositoryTypeName + " " + x.VariableName)) #>)
        {
<# foreach(var repository in Repositories.Values) { #>
			this.<#= repository.VariableName #> = <#= repository.VariableName #>;
<# } #>
        }

        //
        // GET: /<#= routingName #>/

        public ViewResult Index()
        {
<#
	var propertiesToInclude = relatedEntities.Select(relation => relation.LazyLoadingProperty).Where(x => x != null && !(x.Type as EnvDTE80.CodeTypeRef2).IsGeneric);
	var includeExpression = String.Join(", ", propertiesToInclude.Select(x => String.Format("{0} => {0}.{1}", modelVariable, x.Name)));
	if (!string.IsNullOrEmpty(includeExpression)) {
		includeExpression = "Including(" + includeExpression + ")";
	}
#>
            return View(<#= Repositories[modelType.FullName].VariableName #>.All<#= includeExpression #>);
        }
		
		//
		// POST: /<#= routingName#>/List
		[HttpPost]
		public JsonResult List(int page,int rows,string sort, string order)
		{
			try{
				var cols = new string[] { "page", "rows", "sort", "order" };
                NameValueCollection nvc = Request.Form;

                var col = nvc.AllKeys.Except(cols).FirstOrDefault();
				
				var <#= modelVariable #>List = <#= Repositories[modelType.FullName].VariableName #>.All<#= includeExpression #>;
				
                if (!string.IsNullOrEmpty(col))
                {
                    var cType = typeof(<#= modelName #>).GetProperty(col).PropertyType;
                    if (cType.IsGenericType && cType.GetGenericTypeDefinition() == typeof(Nullable<>) && cType.GetGenericArguments()[0] == typeof(DateTime))
                    {
                        <#= modelVariable #>List = <#= modelVariable #>List.Where(string.Format("{0}=@0", col), DateTime.Parse(nvc[col]));
                    }
                    else if (cType.IsValueType || cType == typeof(string))
                    {
						<#= modelVariable #>List = <#= modelVariable #>List.Where(string.Format("{0}=@0", col), nvc[col]);
                    }
                    else
                    {
                        <#= modelVariable #>List = <#= modelVariable #>List.Where(string.Format("{0}.Code=@0", col), nvc[col]);
                    }

                }
				
				var total = <#= modelVariable #>List.Count();
				return Json(new { total = total, rows = <#= modelVariable #>List.OrderBy(sort + " " + order).Skip((page - 1) * rows).Take(rows) });
			}
			catch(Exception ex){
				throw;
			}
		}

        //
        // GET: /<#= routingName #>/Details/5

        public ViewResult Details(<#= primaryKeyProperty.Type.AsString #> id)
        {
            return View(<#= Repositories[modelType.FullName].VariableName #>.Find(id));
        }

        //
        // GET: /<#= routingName #>/Create

        public ActionResult Create()
        {
<# foreach(var relatedEntity in relatedEntities.Where(x => x.RelationType == RelationType.Parent)) { #>
			ViewBag.Possible<#= relatedEntity.RelationNamePlural #>s = <#= Repositories[relatedEntity.RelatedEntityType.FullName].VariableName #>.All;
<# } #>
			<# foreach(var relatedEnum in modelEnumTypes ){ #>
				ViewBag.Possible<#= relatedEnum.Name #> = Enum.GetValues(typeof (<#= relatedEnum.Type.CodeType.FullName #>)).Cast<<#= relatedEnum.Type.CodeType.FullName #>>();
			<# } #>
            return View();
        } 
		public ActionResult Search()
        {
            <# foreach(var relatedEntity in relatedEntities.Where(x => x.RelationType == RelationType.Parent)) { #>
			ViewBag.Possible<#= relatedEntity.RelationNamePlural #>s = <#= Repositories[relatedEntity.RelatedEntityType.FullName].VariableName #>.All;
<# } #>
			<# foreach(var relatedEnum in modelEnumTypes ){ #>
				ViewBag.Possible<#= relatedEnum.Name #> = Enum.GetValues(typeof (<#= relatedEnum.Type.CodeType.FullName #>)).Cast<<#= relatedEnum.Type.CodeType.FullName #>>();
			<# } #>
            return View();
        }
        //
        // POST: /<#= routingName #>/Create

        [HttpPost]
        public ActionResult Create(<#= modelName #> <#= modelVariable #>)
        {
            if (ModelState.IsValid) {
                <#= Repositories[modelType.FullName].VariableName #>.InsertOrUpdate(<#= modelVariable #>);
                <#= Repositories[modelType.FullName].VariableName #>.Save();
                return PartialView("Index");
            } else {
<# foreach(var relatedEntity in relatedEntities.Where(x => x.RelationType == RelationType.Parent)) { #>
				ViewBag.Possible<#= relatedEntity.RelationNamePlural #>s = <#= Repositories[relatedEntity.RelatedEntityType.FullName].VariableName #>.All;
<# } #>
				<# foreach(var relatedEnum in modelEnumTypes ){ #>
				ViewBag.Possible<#= relatedEnum.Name #> = Enum.GetValues(typeof (<#= relatedEnum.Type.CodeType.FullName #>)).Cast<<#= relatedEnum.Type.CodeType.FullName #>>();
			<# } #>
				return PartialView(<#= modelVariable #>);
			}
        }
        
        //
        // GET: /<#= routingName #>/Edit/5
 
        public ActionResult Edit(<#= primaryKeyProperty.Type.AsString #> id)
        {
<# foreach(var relatedEntity in relatedEntities.Where(x => x.RelationType == RelationType.Parent)) { #>
			ViewBag.Possible<#= relatedEntity.RelationNamePlural #>s = <#= Repositories[relatedEntity.RelatedEntityType.FullName].VariableName #>.All;
<# } #>
			<# foreach(var relatedEnum in modelEnumTypes ){ #>
				ViewBag.Possible<#= relatedEnum.Name #> = Enum.GetValues(typeof (<#= relatedEnum.Type.CodeType.FullName #>)).Cast<<#= relatedEnum.Type.CodeType.FullName #>>();
			<# } #>
             return View(<#= Repositories[modelType.FullName].VariableName #>.Find(id));
        }

        //
        // POST: /<#= routingName #>/Edit/5

        [HttpPost]
        public ActionResult Edit(<#= modelName #> <#= modelVariable #>)
        {
            if (ModelState.IsValid) {
                <#= Repositories[modelType.FullName].VariableName #>.InsertOrUpdate(<#= modelVariable #>);
                <#= Repositories[modelType.FullName].VariableName #>.Save();
                return PartialView("Index");
            } else {
<# foreach(var relatedEntity in relatedEntities.Where(x => x.RelationType == RelationType.Parent)) { #>
				ViewBag.Possible<#= relatedEntity.RelationNamePlural #>s = <#= Repositories[relatedEntity.RelatedEntityType.FullName].VariableName #>.All;
<# } #>
			<# foreach(var relatedEnum in modelEnumTypes ){ #>
				ViewBag.Possible<#= relatedEnum.Name #> = Enum.GetValues(typeof (<#= relatedEnum.Type.CodeType.FullName #>)).Cast<<#= relatedEnum.Type.CodeType.FullName #>>();
			<# } #>
				return PartialView(<#= modelVariable #>);
			}
        }

        //
        // GET: /<#= routingName #>/Delete/5
 
        public ActionResult Delete(<#= primaryKeyProperty.Type.AsString #> id)
        {
            return View(<#= Repositories[modelType.FullName].VariableName #>.Find(id));
        }

        //
        // POST: /<#= routingName #>/Delete/5

        [HttpPost, ActionName("Delete")]
        public ActionResult DeleteConfirmed(<#= primaryKeyProperty.Type.AsString #> id)
        {
            <#= Repositories[modelType.FullName].VariableName #>.Delete(id);
            <#= Repositories[modelType.FullName].VariableName #>.Save();

            return PartialView("Index");
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing) {
<# foreach(var repository in Repositories.Values) { #>
                <#= repository.VariableName #>.Dispose();
<# } #>
            }
            base.Dispose(disposing);
        }
    }
}

<#+
class RepositoryInfo {
    public string RepositoryTypeName { get; set; }
    public string VariableName { get; set; }
}

IDictionary<string, RepositoryInfo> _repositories;
IDictionary<string, RepositoryInfo> Repositories {
	get {
		if (_repositories == null) {
			var relatedEntities = ((IEnumerable)Model.RelatedEntities).OfType<RelatedEntityInfo>();
			var relatedTypes = relatedEntities.Where(x => x.RelationType == RelationType.Parent).Select(x => x.RelatedEntityType).Distinct();
			_repositories = relatedTypes.ToDictionary(
				relatedType => relatedType.FullName,
				relatedType => new RepositoryInfo { RepositoryTypeName = relatedType.Name + "Repository", VariableName = relatedType.Name.ToLower() + "Repository" }
			); 
			_repositories[((CodeType)Model.ModelType).FullName] = new RepositoryInfo { RepositoryTypeName = Model.Repository, VariableName = ((CodeType)Model.ModelType).Name.ToLower() + "Repository" };
		}
		return _repositories;
	}
}
#>