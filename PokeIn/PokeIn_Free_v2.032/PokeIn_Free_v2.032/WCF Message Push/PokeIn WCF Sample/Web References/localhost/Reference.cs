//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4952
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.4952.
// 
#pragma warning disable 1591

namespace PokeIn_WCF_Sample.localhost {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="BasicHttpBinding_PokeInWCF", Namespace="http://tempuri.org/")]
    public partial class PokeInWCF : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback AddClientOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddClientsOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveClientOperationCompleted;
        
        private System.Threading.SendOrPostCallback PingMessagesOperationCompleted;
        
        private System.Threading.SendOrPostCallback PingAliveOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public PokeInWCF() {
            this.Url = global::PokeIn_WCF_Sample.Properties.Settings.Default.PokeIn_WCF_Sample_localhost_PokeInWCF;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event AddClientCompletedEventHandler AddClientCompleted;
        
        /// <remarks/>
        public event AddClientsCompletedEventHandler AddClientsCompleted;
        
        /// <remarks/>
        public event RemoveClientCompletedEventHandler RemoveClientCompleted;
        
        /// <remarks/>
        public event PingMessagesCompletedEventHandler PingMessagesCompleted;
        
        /// <remarks/>
        public event PingAliveCompletedEventHandler PingAliveCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PokeInWCF/AddClient", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddClient([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string clientId) {
            this.Invoke("AddClient", new object[] {
                        clientId});
        }
        
        /// <remarks/>
        public void AddClientAsync(string clientId) {
            this.AddClientAsync(clientId, null);
        }
        
        /// <remarks/>
        public void AddClientAsync(string clientId, object userState) {
            if ((this.AddClientOperationCompleted == null)) {
                this.AddClientOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddClientOperationCompleted);
            }
            this.InvokeAsync("AddClient", new object[] {
                        clientId}, this.AddClientOperationCompleted, userState);
        }
        
        private void OnAddClientOperationCompleted(object arg) {
            if ((this.AddClientCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddClientCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PokeInWCF/AddClients", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddClients([System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")] string[] clientIds) {
            this.Invoke("AddClients", new object[] {
                        clientIds});
        }
        
        /// <remarks/>
        public void AddClientsAsync(string[] clientIds) {
            this.AddClientsAsync(clientIds, null);
        }
        
        /// <remarks/>
        public void AddClientsAsync(string[] clientIds, object userState) {
            if ((this.AddClientsOperationCompleted == null)) {
                this.AddClientsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddClientsOperationCompleted);
            }
            this.InvokeAsync("AddClients", new object[] {
                        clientIds}, this.AddClientsOperationCompleted, userState);
        }
        
        private void OnAddClientsOperationCompleted(object arg) {
            if ((this.AddClientsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddClientsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PokeInWCF/RemoveClient", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveClient([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string clientId) {
            this.Invoke("RemoveClient", new object[] {
                        clientId});
        }
        
        /// <remarks/>
        public void RemoveClientAsync(string clientId) {
            this.RemoveClientAsync(clientId, null);
        }
        
        /// <remarks/>
        public void RemoveClientAsync(string clientId, object userState) {
            if ((this.RemoveClientOperationCompleted == null)) {
                this.RemoveClientOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveClientOperationCompleted);
            }
            this.InvokeAsync("RemoveClient", new object[] {
                        clientId}, this.RemoveClientOperationCompleted, userState);
        }
        
        private void OnRemoveClientOperationCompleted(object arg) {
            if ((this.RemoveClientCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveClientCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PokeInWCF/PingMessages", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.datacontract.org/2004/07/ClientWCF_Control")]
        public PokeInWCFMessageFormat[] PingMessages() {
            object[] results = this.Invoke("PingMessages", new object[0]);
            return ((PokeInWCFMessageFormat[])(results[0]));
        }
        
        /// <remarks/>
        public void PingMessagesAsync() {
            this.PingMessagesAsync(null);
        }
        
        /// <remarks/>
        public void PingMessagesAsync(object userState) {
            if ((this.PingMessagesOperationCompleted == null)) {
                this.PingMessagesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPingMessagesOperationCompleted);
            }
            this.InvokeAsync("PingMessages", new object[0], this.PingMessagesOperationCompleted, userState);
        }
        
        private void OnPingMessagesOperationCompleted(object arg) {
            if ((this.PingMessagesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PingMessagesCompleted(this, new PingMessagesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PokeInWCF/PingAlive", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void PingAlive(out bool PingAliveResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool PingAliveResultSpecified) {
            object[] results = this.Invoke("PingAlive", new object[0]);
            PingAliveResult = ((bool)(results[0]));
            PingAliveResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void PingAliveAsync() {
            this.PingAliveAsync(null);
        }
        
        /// <remarks/>
        public void PingAliveAsync(object userState) {
            if ((this.PingAliveOperationCompleted == null)) {
                this.PingAliveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPingAliveOperationCompleted);
            }
            this.InvokeAsync("PingAlive", new object[0], this.PingAliveOperationCompleted, userState);
        }
        
        private void OnPingAliveOperationCompleted(object arg) {
            if ((this.PingAliveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PingAliveCompleted(this, new PingAliveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="PokeInWCF.MessageFormat", Namespace="http://schemas.datacontract.org/2004/07/ClientWCF_Control")]
    public partial class PokeInWCFMessageFormat {
        
        private string[] clientsField;
        
        private string messageField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")]
        public string[] Clients {
            get {
                return this.clientsField;
            }
            set {
                this.clientsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Message {
            get {
                return this.messageField;
            }
            set {
                this.messageField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void AddClientCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void AddClientsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void RemoveClientCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void PingMessagesCompletedEventHandler(object sender, PingMessagesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PingMessagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PingMessagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PokeInWCFMessageFormat[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PokeInWCFMessageFormat[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void PingAliveCompletedEventHandler(object sender, PingAliveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PingAliveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PingAliveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool PingAliveResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool PingAliveResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
}

#pragma warning restore 1591